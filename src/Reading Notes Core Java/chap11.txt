All exceptions are subclasses or implement the Throwable interface
* Checked exceptions are those that are enforced by the compiler.
Meaning that the compiler will give you a warning if you either don't catch it or rethrow the error
* Unchecked exceptions are those typically thrown during the runtime of the program
These exceptions aren't checkable since it is usually the cause of something that we can't predict like
Doing file IO or IndexOutOfBound.

Internal errors are part of Errors class while Exceptions are generally things we can control.

"throws" keyword informs the compiler that a method or a class can throw the given list of possible exceptions
* defined at the header of method or class
* a method must decalre all the checked exceptions it might throw (if not catching)

Warning: overriding a method from a superclass
* declaring exception throwing cannot be more general than the superclass. If the superclass method doesn't throw,
you can't throw. If it does throw, you can't throw what is more general.

We can make our own exception class by extending from Exception

Generally you want to throw exceptions or rethrow them if you aren't able to handle them to the fullest extent
* You can catch multiple exceptions in one statement (if they both are handled the same way)
Exception variables are inheritly "final" since you can only have one exception thrown at a given time really.
When you throw an exception in a try block, it doesn't keep executing the rest of the block.
1.) if it doesn't get caught, it exits the method (goes up the call stack) and looks for a method that can handle the exception
If no exception handling, then the default is to terminate the process
2.) If it is caught, then it is handled accordingly

finally keyword
* finally in a try/catch block will run no matter what happens in the try catch.
It will ALWAYS run before the method exits or returns.
Meaning that if a try block doesn't throw any exceptions and instead does a return, Your finally block
will still execute prior to the return of the method. So you could technically overwrite your return in the try block
if you return again in the finally block.
* Finally can cause problems for cleanup procedures too since it is always ran.

try and closing resources (with finally)
* using finally for cleanup like closing a file stream object is not a great idea since the act of close() in finally block
can also throw an exception in certain cases. This can cause problems and confusion since the close() in the final block
might not be related to the true cause. Like if the file stream object already closed under normal run with no exceptions
thrown.

Try-with-resources statement
* This will auto close the resource you are using after usage
Example:

try (Scanner in = new Scanner(....))
{
 ...
}

Whether it exit normally, or an exception was thrown, the scanner in this example will close()

Tips for exceptions
1.) Exception handling is not suppose to replace a simple test.
Exception handling slows down program
2.) Do not micromanage exceptions (dont go overboard)
3.)Make good use of the exception hierarchy
Be as specific as you can with your exception catching
4.) Do not squelch exceptions. Dont just ignore the warnings from the compiler
just by catching it and doing nothing. Failing silently is bad.
5.) when you detect an error, "tough love" works better than indulgence
6.) Propagating exceptions is not a sign of shame. Sometimes its better to let someone else handle it

Assertions allow you to test code in development
and have that code removed in production.
*testing code can slow down your code in production if there is no actual need for it.
* assertion is a feature of the class loader that adds or removes the assertion code
* by default assertions are disabled
* Assertions for:
1.) assertion failures are intended to be fatal and unrecoverable errors
2.) assertion checks are turned on only for development and testing

You generally want to use assertions as a way to double check yourself for internal logic error
or alert you to things that might not be in the spec of a method or captured in your logic
Assertions thrown an error when the condition is false
Syntax

assert condition;
or
assert condition : expression; // the expression is some string message that will be outputted so you know what the
assertion that cause the problem

Logging is generally a cheap and good idea
* easy to suppress and categorize level of logging
* you can create different loggers and have different handlers for each logger
* a handler dictates where and how to log the messages
* loggers can be configured to record certain levels of log messages and filter

Seven logging levels
1.) SEVERE
2.) WARNING
3.) INFO
4.) CONFIG
5.) FINE
6.) FINER
7.) FINEST

By default, 1-3 are actually logged by the default logger.

Loggers can have hierarchical relationships and child loggers inherit certain properties of the parent
like logging level.

Example,
logger.warning(message);
logger.log(level.FINE, essage)

logp() gives you a finer tune message that can put in where and what method was the log from etc.
by default, class name and method are inferred from the call stack.

Warning: if you change logging level for th elogger, you also need to change hte log handler's config to match

log managers start and initialize during JVM startup, before main executes(). so if you modify the logging configuration
through code, you actually have to reinitialize the log manager in code.

You can also localize (make message relative to locale or country) by giving a file in "resource bundles"
that you can use to map logging messages to a specific locale or language
basically, key value pair mappings. it would auto translate everything

Default handlers for logging send messages to console (ConsoleHandler) to System.err

For a record to be logged, its logging level must be above the threshold of both the logger and the handler.

To send logs somewhere else, FileHandler, and SocketHandler are other handlers that can be used.
(provided by logging api)

FileHandler sends logs to a file
Default is to a java#.log in user's home dir. Default format is XML

Logging tips / recipe
1.) Simple applications, use a single logger




















